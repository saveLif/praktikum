// import { Chart } from 'chart.js';
// import { ChartService } from 'src/app/shared/chart.service';
import { AfterViewInit, Component, ElementRef, ViewChild } from '@angular/core';
// import 'chartjs-adapter-date-fns';
// import { ApiService } from 'src/app/shared/api.service';
// import { TreeComponent } from '../tree/tree.component';
// import { Ob } from './dataObject';
// import {
//   DateAdapter,
//   MAT_DATE_FORMATS,
//   MAT_DATE_LOCALE,
// } from '@angular/material/core';
// import { MomentDateAdapter } from '@angular/material-moment-adapter';
// import { DatePipe } from '@angular/common';

//Deiniert die Darstellung und Abrufung der Datum-Daten
// export const MY_DATE_FORMATS = {
//   parse: {
//     dateInput: 'YYYY-MM-DD', // this is how your date will be parsed from Input
//   },
//   display: {
//     dateInput: 'YYYY-MM-DD', // this is how your date will get displayed on the Input
//     monthYearLabel: 'MMMM YYYY',
//     dateA11yLabel: 'LL',
//     monthYearA11yLabel: 'MMMM YYYY',
//   },
// };
@Component({
  selector: 'app-data',
  templateUrl: './data.component.html',
  styleUrls: ['./data.component.scss'],
  providers: [
  //   ChartService,
  //   {
  //     provide: DateAdapter,
  //     useClass: MomentDateAdapter,
  //     deps: [MAT_DATE_LOCALE],
  //   },
  //   { provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS },
  ],
})
export class DataComponent implements AfterViewInit {
  //Initialisierungen für das Diagramm
  // @ViewChild('chart')
  // private Canvas!: ElementRef;
  // chart!: Chart;
  // config: any;
  // data: any;

  // //Initialisierung der BaumID
  // treeID: any;

  // //Start und Ende des darzustellenden Bereiches
  // start: any;
  // end: any;

  // //Initialisierungen für die Speicherung der Daten für die Darstellung im Diagramm
  // o: Ob[] = [];
  // myA: Array<{ x: any; y: any }> = [];
  // sensoren: any[] = [];

  constructor(
    // private api: ApiService,
    // private tree: TreeComponent,
    // private chartS: ChartService
  ) {}

  //wird nach der Zeitauswahl aufgerufen und aktualisiert den Graphen auf die ausgewählte Zeit
  // dateRangeChange(
  //   dateRangeStart: HTMLInputElement,
  //   dateRangeEnd: HTMLInputElement
  // ) {
    // this.start = dateRangeStart.value;
    // this.end = dateRangeEnd.value;
    // console.log('geht start: ' + this.start);
    // console.log('geht end: ' + this.end);
    // this.chart.destroy();
    // this.lineChartBrowser();
  // }
  //Optionen des Diagramms
  // public barChartOptions = {
  //   scaleShowVerticalLines: false,
  //   responsive: true,
  // };

  //wird nach dem Start der seite aufgerufen
  ngAfterViewInit(): void {
    //ruft die BaumID ab
    // this.treeID = this.tree.treeID;

    // this.getDate();

    // //ruft die Erstellung des Diagramms auf
    // this.lineChartBrowser();
    // var cha = this.chart;
    // setTimeout(function () {
    //   cha.update();
    // }, 1000);
  }

  getDate() {
  //   //bestimmt das heutige Datum und formatiert es in die gebrauchte Form um
  //   let today = new Date();
  //   let pipe = new DatePipe('en-US');
  //   let changedDate = pipe.transform(today, 'YYYY-MM-dd');
  //   //bestimmt das Datum vor 7 Tagen und formatiert es in die gebrauchte Form um
  //   let edate = today.setDate(today.getDate() - 7);
  //   let echangeDate = pipe.transform(edate, 'YYYY-MM-dd');

  //   //schreibt die Daten in die Variablen
  //   this.start = changedDate;
  //   this.end = echangeDate;
  //   console.log('end: ' + this.end);
  //   console.log('start: ' + this.start);
  // }

  // lineChartBrowser(): void {
  //   //setzt alles auf Anfang
  //   let i: number = 0;
  //   this.o = [];
  //   //liest die Objecte einer bestimmten ID aus
  //   this.api.getData('object?ID=' + this.treeID).subscribe((sensor_node) => {
  //     for (const sn of sensor_node) {
  //       //liest die Sensoren des Sensorknoten aus
  //       this.api
  //         .getData('sensor?sensor_node_ID=' + sn.sensor_node_ID)
  //         .subscribe((sensor) => {
  //           for (const s of sensor) {
  //             //liest die Messwerte der Sensoren aus
  //             this.sensoren.push(s.ID);
  //             this.api
  //               .getData('measured_values?sensor_ID=' + s.ID)
  //               .subscribe((messure) => {
  //                 for (const m of messure) {
  //                   //Formatiert die Zeitangabe
  //                   let x = m.timestamp.date + 'T' + m.timestamp.time + 'Z';
  //                   //fügt dem Array die Werte in abhängigkeit der Zeit ein
  //                   this.myA.push({ x: x, y: m.value });
  //                 }
  //                 //Die Daten werden dem Objekt angehängt
  //                 this.o.push({
  //                   label: s.messured_variable,
  //                   yAxisID: s.messured_variable,
  //                   data: this.myA,
  //                 });

  //                 //Zähler, wie viele Daten dem Object angehängt wurden
  //                 i++;

  //                 //Wenn alle Daten eingelesen wurden wird der ChartService aufgerrufen
  //                 if (i == this.sensoren.length) {
  //                   this.draw();
  //                   console.log(this.sensoren);
  //                   this.sensoren = [];
  //                   console.log(this.sensoren);
  //                 }
  //                 //zurücksetzten des Arrays
  //                 this.myA = [];
  //               });
  //           }
  //         });
  //     }
  //   });
  }

  draw() {
    // console.log(this.o, this.start, this.end, this.Canvas.nativeElement);
    // let inf = this.chartS.makeChart(
    //   this.o,
    //   this.start,
    //   this.end,
    //   this.Canvas.nativeElement
    // );
    // //der zurückgegebene Wert wid dieser Chart angehängt
    // this.chart = inf;
  }
}
